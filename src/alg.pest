symbol = @{ LETTER ~ (LETTER | ASCII_DIGIT)* }

// num = @{ int ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ int)? }
num = @{ int }
int = @{ (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT+ | ASCII_DIGIT) }


infix = _{ add | sub | mul | div | pow | and | or | setdiff }
    add       = { "+" }
    sub       = { "-" }
    mul       = { "*" }
    div       = { "/" }
    pow       = { "^" }
    and       = { "&&" }
    or        = { "||" }
    setdiff   = { "\\" }

prefix  =  _{ neg | not}
    neg       = { "-" }
    not       = { "!" }
postfix =  _{ fac }
    fac       = { "!" }

assignment = _{ ":=" }

expr       = { prefix* ~ primary ~ postfix* ~ (infix ~ prefix* ~ primary ~ postfix* )* }
func       = { func_name ~ "[" ~ (expr ~ ( "," ~ expr )*)? ~ "]" }
    func_name = { LETTER ~ (LETTER | ASCII_DIGIT)* }

set        = { "{" ~ (expr ~ ( "," ~ expr )*)? ~ "}" }

primary    = _{ func | symbol | num | set | "(" ~ expr ~ ")" }

statement  = { symbol ~ assignment ~ expr }

line = { statement | expr }

program = _{ SOI ~ (line ~ NEWLINE )* ~ line? ~ EOI }

WHITESPACE = _{ " " | "\t" }
NEWLINE = _{ "\n" | "\r\n" }